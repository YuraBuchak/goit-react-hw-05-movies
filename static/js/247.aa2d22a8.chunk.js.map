{"version":3,"file":"static/js/247.aa2d22a8.chunk.js","mappings":"qSAAMA,EAAa,gCAGbC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIOC,EAAa,mCAAG,6GAENC,MAAM,GAAD,OACnBP,EADmB,qCAEtBC,GAJuB,cAEnBO,EAFmB,gBAOZA,EAAKC,OAPO,wEASzBC,QAAQC,IAAR,MATyB,yDAAH,qDAabC,EAAiB,mCAAG,WAAMC,GAAN,gGAEVN,MAAM,GAAD,OACnBP,EADmB,8BACaa,EADb,8CAEtBZ,GAJ2B,cAEvBO,EAFuB,gBAOhBA,EAAKC,OAPW,wEAS7BC,QAAQC,IAAR,MAT6B,yDAAH,sDAajBG,EAAqB,mCAAG,WAAMC,GAAN,gGAEdR,MAAM,GAAD,OACnBP,EADmB,kBACCe,EADD,mBAEtBd,GAJ+B,cAE3BO,EAF2B,gBAOpBA,EAAKC,OAPe,wEASjCC,QAAQC,IAAR,MATiC,yDAAH,sDAarBK,EAAY,mCAAG,WAAMD,GAAN,gGAELR,MAAM,GAAD,OACnBP,EADmB,iBACAe,EADA,2BAEtBd,GAJsB,cAElBO,EAFkB,gBAOXA,EAAKC,OAPM,wEASxBC,QAAQC,IAAR,MATwB,yDAAH,sDAaZM,EAAY,mCAAG,WAAMF,GAAN,gGAELR,MAAM,GAAD,OACnBP,EADmB,iBACAe,EADA,kCAEtBd,GAJsB,cAElBO,EAFkB,gBAOXA,EAAKC,OAPM,wEASxBC,QAAQC,IAAR,MATwB,yDAAH,qD,+FC7DjBO,EAAcC,EAAQ,IAAtBD,UAmDR,UAjDa,WACX,OAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,EAAYL,IAAZK,QAuBR,OAnBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,kHAE2BR,EAAAA,EAAAA,IAAaO,GAFxC,gBAEYF,EAFZ,EAEYA,KAEFI,EAAeJ,EAAKK,KACxB,YACE,MAAO,CAAEC,KADgC,EAAxCA,KACcC,UAD0B,EAAlCA,UACmBC,aADe,EAAvBA,aACsBd,GADC,EAATA,GAEjC,IAGHO,EAAQG,GAVZ,gDAYIf,QAAQoB,KAAR,MAZJ,0DADc,uBAAC,WAAD,wBAgBdvB,EACD,GAAE,CAACgB,KAGF,+BACE,+BACGF,QADH,IACGA,OADH,EACGA,EAAMK,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAAcd,EAAlC,EAAkCA,GAAlC,OACT,0BACE,4BACE,gBACEgB,IACEF,EAAY,0CAC2BA,GA9BrD,mKAiCYG,IAAKL,KAEP,uBAAIA,KACJ,uCAAeC,SAXTb,EADD,OAmBlB,C","sources":["Api/Api.js","components/Cast/Cast.jsx"],"sourcesContent":["const defaultUrl = 'https://api.themoviedb.org/3/';\n// const ApiKey = 'd18bf6b2746fb0003930e48639ffb8b8';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkMThiZjZiMjc0NmZiMDAwMzkzMGU0ODYzOWZmYjhiOCIsInN1YiI6IjY0Nzg4ODA5OTM4MjhlMDBhNzYzMzI2YSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.lKAxGANSJLLtol2MDLLv8krLLwoOSubkdCp9pQTm9io',\n  },\n};\n\nexport const fetchTrending = async () => {\n  try {\n    const data = await fetch(\n      `${defaultUrl}trending/movie/day?language=en-US`,\n      options\n    );\n\n    return await data.json();\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchSearchMovies = async text => {\n  try {\n    const data = await fetch(\n      `${defaultUrl}search/movie?query=${text}&include_adult=false&language=en-US&page=1`,\n      options\n    );\n\n    return await data.json();\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieDetailsById = async id => {\n  try {\n    const data = await fetch(\n      `${defaultUrl}/movie/${id}?language=en-US`,\n      options\n    );\n\n    return await data.json();\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCredits = async id => {\n  try {\n    const data = await fetch(\n      `${defaultUrl}movie/${id}/credits?language=en-US`,\n      options\n    );\n\n    return await data.json();\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchReviews = async id => {\n  try {\n    const data = await fetch(\n      `${defaultUrl}movie/${id}/reviews?language=en-US&page=1`,\n      options\n    );\n\n    return await data.json();\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import { fetchCredits } from 'Api/Api';\nimport { useEffect, useState } from 'react';\n\nconst { useParams } = require('react-router-dom');\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n  const defaultImg =\n    'https://cdn-icons-png.flaticon.com/512/847/847969.png?w=740&t=st=1685547292~exp=1685547892~hmac=2825f00d1a2c61ae503ac799344847357b8a6baa8b9db6ee1132a6431b92254c';\n\n  useEffect(() => {\n    async function fetch() {\n      try {\n        const { cast } = await fetchCredits(movieId);\n\n        const filteredCast = cast.map(\n          ({ name, character, profile_path, id }) => {\n            return { name, character, profile_path, id };\n          }\n        );\n\n        setCast(filteredCast);\n      } catch (error) {\n        console.warn(error);\n      }\n    }\n    fetch();\n  }, [movieId]);\n\n  return (\n    <>\n      <ul>\n        {cast?.map(({ name, character, profile_path, id }) => (\n          <div key={id}>\n            <div>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n                    : defaultImg\n                }\n                alt={name}\n              />\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </div>\n          </div>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["defaultUrl","options","method","headers","accept","Authorization","fetchTrending","fetch","data","json","console","log","fetchSearchMovies","text","fetchMovieDetailsById","id","fetchCredits","fetchReviews","useParams","require","useState","cast","setCast","movieId","useEffect","filteredCast","map","name","character","profile_path","warn","src","alt"],"sourceRoot":""}